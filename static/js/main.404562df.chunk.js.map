{"version":3,"sources":["logic/operate.js","components/Calculator.jsx","logic/calculate.js","App.js","reportWebVitals.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","Calculator","state","next","total","buttonClicked","bind","e","buttonName","target","innerText","result","obj","match","includes","parseFloat","calculate","this","setState","previousState","undefined","id","className","value","readOnly","type","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEe,SAASA,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GACVK,EAAMD,IAAIH,GAChB,GAAkB,MAAdC,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,OAAOC,EAAIO,IAAIL,GAAKE,WAEtB,GAAkB,MAAdL,EACF,OAAOC,EAAIQ,IAAIN,GAAKE,WAEtB,MAAMK,MAAM,sBAAD,OAAuBV,EAAvB,M,WCuCEW,E,kDAtDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXZ,UAAW,KACXa,KAAM,KACNC,MAAO,MAET,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAPT,E,iDAUd,SAAcC,GACZ,IAAMC,EAAaD,EAAEE,OAAOC,UACtBC,ECFK,SAAmBC,EAAKJ,GACrC,MAAmB,OAAfA,EACK,CACLJ,MAAO,KACPD,KAAM,KACNb,UAAW,MAIFkB,EArBCK,MAAM,UAsBC,MAAfL,GAAmC,MAAbI,EAAIT,KACrB,GAGLS,EAAItB,UACFsB,EAAIT,KACC,CAAEA,KAAMS,EAAIT,KAAOK,GAErB,CAAEL,KAAMK,GAGbI,EAAIT,KACC,CACLA,KAAMS,EAAIT,KAAOK,EACjBJ,MAAO,MAGJ,CACLD,KAAMK,EACNJ,MAAO,MAIQ,MAAfI,EACEI,EAAIT,KACFS,EAAIT,KAAKW,SAAS,KACb,GAEF,CAAEX,KAAK,GAAD,OAAKS,EAAIT,KAAT,MAEXS,EAAItB,UACC,CAAEa,KAAM,MAEbS,EAAIR,MACFQ,EAAIR,MAAMU,SAAS,KACd,GAEF,CAAEV,MAAM,GAAD,OAAKQ,EAAIR,MAAT,MAET,CAAEA,MAAO,MAGC,MAAfI,EACEI,EAAIT,MAAQS,EAAItB,UACX,CACLc,MAAOjB,EAAQyB,EAAIR,MAAOQ,EAAIT,KAAMS,EAAItB,WACxCa,KAAM,KACNb,UAAW,MAIR,GAGU,QAAfkB,EACEI,EAAIT,KACC,CAAEA,OAAQ,EAAIY,WAAWH,EAAIT,OAAOR,YAEzCiB,EAAIR,MACC,CAAEA,QAAS,EAAIW,WAAWH,EAAIR,QAAQT,YAExC,GAYLiB,EAAItB,UACC,CACLc,MAAOjB,EAAQyB,EAAIR,MAAOQ,EAAIT,KAAMS,EAAItB,WACxCa,KAAM,KACNb,UAAWkB,GAOVI,EAAIT,KAKF,CACLC,MAAOQ,EAAIT,KACXA,KAAM,KACNb,UAAWkB,GAPJ,CAAElB,UAAWkB,GD7FLQ,CAAUC,KAAKf,MAAOM,GACrCS,KAAKC,UAAS,SAACC,GACb,IAAQ7B,EAA2B6B,EAA3B7B,UAAWa,EAAgBgB,EAAhBhB,KAAMC,EAAUe,EAAVf,MACzB,MAAO,CACLd,eAAkC8B,IAArBT,EAAOrB,UAA2BA,EAAYqB,EAAOrB,UAClEa,UAAwBiB,IAAhBT,EAAOR,KAAsBA,EAAOQ,EAAOR,KACnDC,WAA0BgB,IAAjBT,EAAOP,MAAuBA,EAAQO,EAAOP,Y,oBAK5D,WACE,MAAwBa,KAAKf,MAArBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OACE,sBAAKiB,GAAG,aAAR,UACE,uBAAOC,UAAU,wDAAwDC,MAAOpB,GAASC,GAAS,EAAIoB,UAAQ,IAC9G,sBAAKF,UAAU,yBAAf,UACE,wBAAQG,KAAK,SAASC,QAAST,KAAKZ,cAApC,gBACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,iBACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQiB,UAAU,aAAaG,KAAK,SAASC,QAAST,KAAKZ,cAA3D,kBACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQiB,UAAU,aAAaG,KAAK,SAASC,QAAST,KAAKZ,cAA3D,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQiB,UAAU,aAAaG,KAAK,SAASC,QAAST,KAAKZ,cAA3D,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQiB,UAAU,aAAaG,KAAK,SAASC,QAAST,KAAKZ,cAA3D,eACA,wBAAQgB,GAAG,cAAcI,KAAK,SAASC,QAAST,KAAKZ,cAArD,eACA,wBAAQoB,KAAK,SAASC,QAAST,KAAKZ,cAApC,eACA,wBAAQiB,UAAU,aAAaG,KAAK,SAASC,QAAST,KAAKZ,cAA3D,yB,GAhDesB,IAAMC,WEOhBC,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCQSQ,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.404562df.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport calculate from '../logic/calculate';\n\nclass Calculator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      operation: null,\n      next: null,\n      total: null,\n    };\n    this.buttonClicked = this.buttonClicked.bind(this);\n  }\n\n  buttonClicked(e) {\n    const buttonName = e.target.innerText;\n    const result = calculate(this.state, buttonName);\n    this.setState((previousState) => {\n      const { operation, next, total } = previousState;\n      return {\n        operation: ((result.operation === undefined) ? operation : result.operation),\n        next: ((result.next === undefined) ? next : result.next),\n        total: ((result.total === undefined) ? total : result.total),\n      };\n    });\n  }\n\n  render() {\n    const { next, total } = this.state;\n    return (\n      <div id=\"calculator\">\n        <input className=\"text-right border-0 bg-gray text-white p-1 py-3 w-100\" value={next || (total || 0)} readOnly />\n        <div className=\"buttons d-grid bg-gray\">\n          <button type=\"button\" onClick={this.buttonClicked}>AC</button>\n          <button type=\"button\" onClick={this.buttonClicked}>+/-</button>\n          <button type=\"button\" onClick={this.buttonClicked}>%</button>\n          <button className=\"bg-warning\" type=\"button\" onClick={this.buttonClicked}>รท</button>\n          <button type=\"button\" onClick={this.buttonClicked}>7</button>\n          <button type=\"button\" onClick={this.buttonClicked}>8</button>\n          <button type=\"button\" onClick={this.buttonClicked}>9</button>\n          <button className=\"bg-warning\" type=\"button\" onClick={this.buttonClicked}>x</button>\n          <button type=\"button\" onClick={this.buttonClicked}>4</button>\n          <button type=\"button\" onClick={this.buttonClicked}>5</button>\n          <button type=\"button\" onClick={this.buttonClicked}>6</button>\n          <button className=\"bg-warning\" type=\"button\" onClick={this.buttonClicked}>-</button>\n          <button type=\"button\" onClick={this.buttonClicked}>1</button>\n          <button type=\"button\" onClick={this.buttonClicked}>2</button>\n          <button type=\"button\" onClick={this.buttonClicked}>3</button>\n          <button className=\"bg-warning\" type=\"button\" onClick={this.buttonClicked}>+</button>\n          <button id=\"zero-button\" type=\"button\" onClick={this.buttonClicked}>0</button>\n          <button type=\"button\" onClick={this.buttonClicked}>.</button>\n          <button className=\"bg-warning\" type=\"button\" onClick={this.buttonClicked}>=</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import './App.css';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}